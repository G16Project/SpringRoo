// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package project.group16.entity;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import project.group16.domain.Employee;
import project.group16.entity.EPosition;
import project.group16.entity.FinanceDepertment;
import project.group16.entity.FinanceDepertmentDataOnDemand;
import project.group16.entity.TimeForJob;

privileged aspect FinanceDepertmentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FinanceDepertmentDataOnDemand: @Component;
    
    private Random FinanceDepertmentDataOnDemand.rnd = new SecureRandom();
    
    private List<FinanceDepertment> FinanceDepertmentDataOnDemand.data;
    
    public FinanceDepertment FinanceDepertmentDataOnDemand.getNewTransientFinanceDepertment(int index) {
        FinanceDepertment obj = new FinanceDepertment();
        setAccountNumber(obj, index);
        setApprovedByManager(obj, index);
        setBonuses(obj, index);
        setEPosition(obj, index);
        setInformation(obj, index);
        setStartJob(obj, index);
        setTimeForJob(obj, index);
        return obj;
    }
    
    public void FinanceDepertmentDataOnDemand.setAccountNumber(FinanceDepertment obj, int index) {
        String accountNumber = "accountNumber_" + index;
        obj.setAccountNumber(accountNumber);
    }
    
    public void FinanceDepertmentDataOnDemand.setApprovedByManager(FinanceDepertment obj, int index) {
        Boolean approvedByManager = Boolean.TRUE;
        obj.setApprovedByManager(approvedByManager);
    }
    
    public void FinanceDepertmentDataOnDemand.setBonuses(FinanceDepertment obj, int index) {
        Float Bonuses = new Integer(index).floatValue();
        obj.setBonuses(Bonuses);
    }
    
    public void FinanceDepertmentDataOnDemand.setEPosition(FinanceDepertment obj, int index) {
        EPosition ePosition = EPosition.class.getEnumConstants()[0];
        obj.setEPosition(ePosition);
    }
    
    public void FinanceDepertmentDataOnDemand.setInformation(FinanceDepertment obj, int index) {
        Employee Information = null;
        obj.setInformation(Information);
    }
    
    public void FinanceDepertmentDataOnDemand.setStartJob(FinanceDepertment obj, int index) {
        Date startJob = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStartJob(startJob);
    }
    
    public void FinanceDepertmentDataOnDemand.setTimeForJob(FinanceDepertment obj, int index) {
        TimeForJob timeForJob = TimeForJob.class.getEnumConstants()[0];
        obj.setTimeForJob(timeForJob);
    }
    
    public FinanceDepertment FinanceDepertmentDataOnDemand.getSpecificFinanceDepertment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FinanceDepertment obj = data.get(index);
        Long id = obj.getId();
        return FinanceDepertment.findFinanceDepertment(id);
    }
    
    public FinanceDepertment FinanceDepertmentDataOnDemand.getRandomFinanceDepertment() {
        init();
        FinanceDepertment obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return FinanceDepertment.findFinanceDepertment(id);
    }
    
    public boolean FinanceDepertmentDataOnDemand.modifyFinanceDepertment(FinanceDepertment obj) {
        return false;
    }
    
    public void FinanceDepertmentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FinanceDepertment.findFinanceDepertmentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FinanceDepertment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FinanceDepertment>();
        for (int i = 0; i < 10; i++) {
            FinanceDepertment obj = getNewTransientFinanceDepertment(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
